<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oracle.devwareProject.ApproveMapper">

	<select id="ApvTotal" resultType="int">
	 	select Count(*) FROM approve where emp_num = #{emp_num}
 	</select>
 	
 	<select id="NotApvTotal" resultType="int">
	 	select Count(*) FROM approve_progress 
		where 	(prg_num1 = #{emp_num} and prg_auth1 = 0) OR 
		        (prg_num2 = #{emp_num} and prg_auth2 = 0) OR 
		        (prg_num3 = #{emp_num} and prg_auth3 = 0);
        
 	</select>
 	
 	 <select id="wsApvListAll" parameterType="Approve" resultType="Approve">
      <![CDATA[
		SELECT *
		FROM
		(
		        SELECT rownum rn , a.*
		        FROM
		                   (
		                    select p.*, e.emp_name, c.ca_content
						    from approve p
						    inner join emp e
						    on e.emp_num=p.emp_num
                            inner join common_approve c
                            on 
                            p.comu_type + p.comu_app = c.ca_num + c.ca_appnum 
                            or
                            p.docs_type + p.docs_app = c.ca_num + c.ca_appnum 
                            ORDER BY app_date desc
                            ) a
		 )   
 		WHERE  rn >= #{start} 
 		and    rn <= #{end} 
 		and	   emp_num = #{emp_num}
 	  ]]>	
    </select>
    
    <select id="wsNotApvListAll" parameterType="Approve" resultType="Approve">
      <![CDATA[
			SELECT *
		FROM
		(
		        SELECT rownum rn , a.*
		        FROM
		                   (
                        select p.*, e.emp_name, c.ca_content,
                        g.prg_num1, g.prg_name1, g.prg_auth1,
                        g.prg_num2, g.prg_name2, g.prg_auth2,
                        g.prg_num3, g.prg_name3, g.prg_auth3
                        from approve p
                        inner join emp e
                        on e.emp_num=p.emp_num
                        inner join common_approve c
                        on 
                        p.comu_type + p.comu_app = c.ca_num + c.ca_appnum 
                        or
                        p.docs_type + p.docs_app = c.ca_num + c.ca_appnum 
                        inner join approve_progress g
                        on p.app_num = g.app_num
                        ORDER BY app_date desc
                            ) a
		 )   
 		WHERE  rn >= 1
 		and    rn <= 10
 		and	   ((prg_num1 = #{emp_num} and prg_auth1 = 0) OR 
		        (prg_num2 = #{emp_num} and prg_auth2 = 0) OR 
		        (prg_num3 = #{emp_num} and prg_auth3 = 0))
 	  ]]>	
    </select>
    
    <insert id="wsWriteApv" parameterType="Approve" useGeneratedKeys="true" 
    						keyColumn="app_num" 	keyProperty="app_num" >
     insert into approve(app_num, app_prg, APP_START, app_title, APP_CONTENT, app_date, emp_num, docs_app, comu_app)
      values ( apv_seq.nextval,'미결재', sysdate, #{app_title}, #{app_content}, sysdate, #{ emp_num }, #{docs_app , jdbcType=VARCHAR}, VACATIONCUS(#{comu_app , jdbcType=VARCHAR})) 
    
    </insert>
    
    <insert id="wsWriteApvPrg" parameterType="Approve_Progress" >
     insert into approve_progress(app_num, 
     							 prg_num1, prg_name1, prg_auth1, 
    							 prg_num2, prg_name2, prg_auth2,  
    							 prg_num3, prg_name3, prg_auth3, 
    							 PRG_STATUS, prg_date)
      values ( #{app_num}, 
      			#{prg_num1}, #{prg_name1}, 0, 
      			#{prg_num2}, #{prg_name2}, 0,
      			#{prg_num3}, #{prg_name3}, 0, 
      			'미결재', sysdate) 
    
    </insert>
    
    <select id="getAllUserInfo" resultType="EmpForSearch">
     <![CDATA[
		SELECT
		    *
		FROM emp e, dept d, position p
		where e.dept_num = d.dept_num and e.position_num = p.position_num
		]]>	
 	</select>


	<select id="getAllUserInfo2" resultType="EmpForSearch" >
     <![CDATA[
		SELECT
		    *
		FROM emp e, dept d, position p
		where e.dept_num = d.dept_num and e.position_num = p.position_num and e.emp_num = #{param}
		]]>	
 	</select>
 	
 	
 	<select id="getempDeptInfo" resultType="EmpForSearch" >
     <![CDATA[
		SELECT
		    *
		FROM emp e, dept d, position p
		where e.dept_num = d.dept_num and e.position_num = p.position_num and e.dept_num = #{dept_num}
		]]>	
 	</select>
 	
 	<select id="wsDetailApv" parameterType="String"  resultType="AllForApprove" >
     <!-- 세션 연결시 로그인 emp_num하고 연결 시키기  -->
		<![CDATA[
		SELECT
		    *
		FROM emp e, approve a, approve_progress g, position p, dept d
		where   e.emp_num = a.emp_num 
            and e.dept_num = d.dept_num
			and a.app_num = g.app_num 
			and e.position_num = p.position_num
			and a.app_num = #{app_num}
		]]>	
 	</select>
 	
 	



	<select id="wsPositioName" resultType="AllForApprove" >
		<![CDATA[
		 	select    get_position_name(e1.position_num) position_name1
			       ,  get_position_name(e2.position_num) position_name2
			       ,  get_position_name(e3.position_num) position_name3
			from      approve_progress ap  , emp e1 , emp e2 , emp e3
			where     ap.prg_num1    = e1.emp_num(+)
			and       ap.prg_num2    = e2.emp_num(+)
			and       ap.prg_num3    = e3.emp_num(+)
			and       ap.app_num 	 = #{app_num}
		]]>	
 	</select>


	<select id="wsGetVacation"  parameterType="int"  resultType="Vacation" >
		<![CDATA[
		select 	*
		from 	vacation
		where 	emp_num = #{ emp_num }
		]]>	
 	</select>

	<update id="wsUpdate" parameterType="Calendar">
		update vacation
		set 
		va_stock = (
        (SELECT
            va_stock
        FROM vacation
        where emp_num = #{ calendar_emp_num }
        ) - (
        SELECT (TO_DATE(#{calendar_end, jdbcType=VARCHAR}, 'YYYY-MM-DD') -  TO_DATE(#{calendar_start, jdbcType=VARCHAR}, 'YYYY-MM-DD'))+1 FROM DUAL
            )
        )
		where emp_num = #{ calendar_emp_num }

	</update>
	
	
	<update id="wsAuthApv1" parameterType="String">
		UPDATE approve_progress
		  SET prg_auth1 = 1
		  where app_num = #{ app_num }
	</update>
	
	<update id="wsAuthApv2" parameterType="String">
		UPDATE approve_progress
		  SET prg_auth2 = 1
		  where app_num = #{ app_num }
	</update>
	
	<update id="wsAuthApv3" parameterType="String">
		UPDATE approve_progress
		  SET prg_auth3 = 1
		  where app_num = #{app_num}
	</update>
	
	 <select id="wsAuthNumCnt" resultType="int" >
    select  count(prg_num1)+count(prg_num2)+count(prg_num3)
	from 	approve_progress
	where 	app_num = #{app_num}
    </select>
    
     <select id="wsAuthCnt" resultType="int">
    select  sum(prg_auth1 + prg_auth2 + prg_auth3)
	from 	approve_progress
	where 	app_num = #{app_num}
    </select>
	
	
	<update id="wsAuthResult" parameterType="String">
		UPDATE approve_progress
		  SET PRG_STATUS = '결재승인'
		  where app_num = #{ app_num }
	</update>
	
		<update id="wsAuthResult2" parameterType="String">
		UPDATE approve
		  SET app_prg = '결재승인'
		  where app_num = #{ app_num }
	</update>
	
 	<update id="wsReWriteApv" parameterType="Approve"  >
    	update approve
    	set app_title = #{app_title}, APP_CONTENT = #{app_content}, docs_app = #{docs_app , jdbcType=VARCHAR}, comu_app = VACATIONCUS(#{comu_app , jdbcType=VARCHAR})
		where app_num = #{ app_num }
    </update>
    
    <update id="wsReWriteApvPrg" parameterType="Approve_Progress" >
    update approve_progress
    	set prg_num1 = #{prg_num1}, prg_name1 = #{prg_name1}, prg_auth1 = 0,
    	    prg_num2 = #{prg_num2}, prg_name2 = #{prg_name2}, prg_auth2 = 0,
    	    prg_num3 = #{prg_num3}, prg_name3 = #{prg_name3}, prg_auth3 = 0       
		where app_num = #{ app_num }

    </update>
    
	<update id="wsRtnApv" parameterType="Approve_Progress" >
    update approve_progress
    	set     PRG_RETURN = #{prg_return} , PRG_STATUS = '반려'
		where 	app_num = #{ app_num }
    </update>
    
    <update id="wsRtnApv2" parameterType="Approve_Progress" >
    update approve
    	set     app_prg = '반려'
		where 	app_num = #{ app_num }
    </update>
    
    
    <insert id="wsApvAttach" parameterType="Approve">
    insert all
    
    <foreach collection="approveAttachs" item="item" separator=" ">
	    into approve_file
	    values(
	    #{ app_num },
	     apvfile_seq.nextval,
	    #{ item.file_name },
	    sysdate,
	    #{ item.file_oriname }
	    )
    </foreach>
    select * from DUAL
    
    </insert>
    
    <delete id="wsApvPrgDel">
    	delete 
    	from approve_progress
    	 WHERE app_num = #{ app_num }
    </delete>
    
    <delete id="wsApvDel">
    	delete 
    	from approve
    	 WHERE app_num = #{ app_num }
    </delete>
    
    <delete id="wsApvFileDel">
    	delete 
    	from approve_file
    	 WHERE app_num = #{ app_num }
    </delete>
</mapper>